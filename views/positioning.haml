!!! 5
%html
  %head
    %title 
      three.js canvas - geometry - cube
    %link{:type=>"text/css", :href=>"/development-bundle/themes/base/jquery.ui.all.css", :rel=>"stylesheet"}
    %link{:type=>"text/css", :href=>"/css/style.css", :rel=>"stylesheet"}
    %script{:type=>"text/javascript", :src=>"/js/jquery-1.6.2.min.js"}    
  %body
    %script{:type=>"text/javascript", :src=>"/js/Tween.js"}
    %script{:type=>"text/javascript", :src=>"/Three.js"}
    %script{:type=>"text/javascript", :src=>"/js/RequestAnimationFrame.js"}
    %script{:type=>"text/javascript", :src=>"/js/Stats.js"}
    %script{:type=>"text/javascript", :src=>"/js/three_helper.js"}
    %script{:type=>"text/javascript", :src=>"/fonts/helvetiker_regular.typeface.js"}
    %script{:type=>"text/javascript", :src=>"/fonts/gentilis_regular.typeface.js"}
    %script{:type=>"text/javascript", :src=>"/js/microcache.js"}
    %script{:type=>"text/javascript", :src=>"/js/THREEx.WindowResize.js"}
    %script{:type=>"text/javascript", :src=>"/js/DAT.GUI.min.js"}
    
    %script{:type=>"text/javascript", :src=>"/js/OLAP/CUBE.js"}        

    %script{:type=>"text/javascript", :src=>"/js/OLAP/Activities/CubeSelectionActivity.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Activities/BuildCubeActivity.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/CameraMovement.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Factory.js"}
    
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Datatypes/OLAPCube.js"}                       
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Datatypes/Dimension.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Datatypes/Hierarchy.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Datatypes/Level.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Datatypes/Member.js"}

    %script{:type=>"text/javascript", :src=>"/js/OLAP/VisualComponents/Navigator.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/VisualComponents/QueryBuilder.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/VisualComponents/Cubic.js"} 
    
    
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Util/ScreenUtil.js"}         
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Util/MaterialUtil.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Util/Util.js"}      
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Util/TextureUtil.js"} 
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Util/SceneUtil.js"}
    %script{:type=>"text/javascript", :src=>"/js/OLAP/Util/TweenUtil.js"}
           
    :javascript

      
      
        var container, stats;
        var cubeManager; 
        var canvasWidth = window.innerWidth;
        var canvasHeight = window.innerHeight;
        var windowHalfX = canvasWidth / 2;
        var windowHalfY = canvasHeight / 2;
        var currentActivity;
        var INTERSECTED;
        var SELECTED;
        var ROTATABLE;
        var offset = new THREE.Vector3();
        var lastActivity;
        var fov = 60;
        
        var mouseX = 0;
        var mouseY = 0;
        
        var targetRotation = 0;
        var targetRotationOnMouseDown = 0;
        var mouseXRotate = 0;
        var mouseXOnMouseDown = 0;
        
        var params = window.location.href.split("/")
        var selectedParams = [];
        var TOOGLEFLAG = 1;
        
        
        var mat2 = new CUBE.MaterialUtil().instance;
        var mat1 = new THREE.MeshFaceMaterial();
        var materials = [mat1, mat1, mat1, mat1, mat1, mat1];
        var cube = new THREE.CubeGeometry( 200, 200, 200, 1, 1, 1, new THREE.MeshFaceMaterial());
        cube.overdraw = true;
        
        var lat =0;
        var phi = 0;
        var theta = 0;
        var lat = 0;
        var lon = 0;
        
        var rot     = 0xED5C2D;
        var grau    = 0xF1EFD8;
        var blau    = 0x007A6F;
        var violett = 0x007A6F;
        var gelb    = 0xcda869;
        var senf    = 0xCED73E;
        
        
        var cubeNames = ["Calls","HRM", "Sales","Students","Exams", "Customer","Devices","Production","Research", "Financial"];
        THREE.Object3D.prototype.clear = function(){
          var children = this.children;
          for(var i = children.length-1;i>=0;i--){
              var child = children[i];
              child.clear();
              this.removeChild(child);
          };
        };
        
       Array.prototype.remove=function(s){
        var i = this.indexOf(s);
        if(i != -1) this.splice(i, 1);
        }
        Array.prototype.contains=function(obj) {
            for (var i = 0; i < this.length; i++) {
                if (this[i] === obj) {
                    return true;
                }
            }
            return false;
        }   
        
        THREE.Object3D.prototype.draggable = false;
        THREE.Object3D.prototype.clickable = false;
        THREE.Object3D.prototype.dragged   = false;
        THREE.Object3D.prototype.rotatable = false;
        THREE.Object3D.prototype.moveOnTreeUpdate = true;
        THREE.Object3D.prototype.onTarget = false;
        

        init();
        animate(); 
         
        function init() {
            container = document.createElement( 'div' );
            document.body.appendChild( container );
            var scene      = new CUBE.SceneUtil(new THREE.Scene());      
            var projector  = new THREE.Projector();
            var camera     = new CUBE.Factory.createCamera(60, canvasWidth, canvasHeight, 1, 20000);
            //camera.useTaget= true;
            var screenUtil = new CUBE.ScreenUtil(canvasWidth, camera, 60, canvasWidth/ canvasHeight );
            var tweenUtil = new CUBE.TweenUtil();
            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setSize( canvasWidth, canvasHeight );
            renderer.domElement.style.border = "2px solid black";
            renderer.domElement.style.backgroundColor = "#F1EFD8";
            renderer._microCache = new MicroCache();
            //THREEx.WindowResize(renderer, camera);
            //var gui = new DAT.GUI();
            var gui = null;//new DAT.GUI();
            
            var light = null;//new THREE.DirectionalLight( 0xffff00 );
            //light.position.set( 0, 0, 1 );
            //light.position.normalize();
            cubeManager = new CUBE.CubeManager(scene, camera, projector, renderer, screenUtil, gui, light, tweenUtil);
            console.log(renderer);
            // Checkbox field
            //cubeManager.sceneUtil.scene.addLight(light);
            
            for ( var i = 4; i < params.length; i ++ ) {
              selectedParams.push(params[i]);
            }
            
            if(selectedParams[0] == "CubeSelection"){
              
              currentActivity = new CUBE.CubeSelectionActivity(cubeManager);
              currentActivity.init(cubeNames);
              
              
            }else if(selectedParams[0] == "BuildCube"){
              console.log(selectedParams);
              var queryParams = [];
              for ( var i = 6; i < params.length; i ++ ) {
                queryParams.push(params[i]);
              }
              
              if(queryParams.length > 0){
                currentActivity = new CUBE.BuildCubeActivity(cubeManager, null,selectedParams[1]);
                currentActivity.init(queryParams);
                
                
              }else{
                currentActivity = new CUBE.BuildCubeActivity(cubeManager, null,selectedParams[1]);
                currentActivity.init(queryParams);
              }
              
            }else{
              currentActivity = new CUBE.CubeSelectionActivity(cubeManager);
              currentActivity.init(cubeNames);
            }
            
            container.appendChild( renderer.domElement );
            stats = new Stats();
            stats.domElement.style.position = 'absolute';
            stats.domElement.style.top = '0px';
            stats.domElement.style.left = '1000px';
            container.appendChild( stats.domElement );
            
            renderer.domElement.addEventListener( 'mousemove', onDocumentMouseMove, false );
            renderer.domElement.addEventListener( 'mousedown', onDocumentMouseDown, false );
            renderer.domElement.addEventListener( 'mouseup', onDocumentMouseUp, false );
            renderer.domElement.addEventListener( 'mousewheel', onDocumentMouseWheel, false );
            
    
          }
          
          
        function onDocumentMouseWheel( event ) {
              event.preventDefault();
              currentActivity.onDocumentMouseWheel(event);
        }

          var isUserInteracting = false;
          var onPointerDownPointerX =0;
          var onPointerDownPointerY;
          var onPointerDownLon;
          var onPointerDownLat;
        function onDocumentMouseDown( event ) {
            event.preventDefault();  
            
            isUserInteracting = true;
            onPointerDownPointerX = event.clientX;
            onPointerDownPointerY = event.clientY;
            onPointerDownLon = lon;
            onPointerDownLat = lat;
            
            currentActivity.onDocumentMouseDown(event);
        }
        function onDocumentMouseMove( event ) {
              if ( isUserInteracting ) {
                
                lon = ( onPointerDownPointerX - event.clientX ) * 0.4 + onPointerDownLon;
                lat = ( event.clientY - onPointerDownPointerY ) * 0.4 + onPointerDownLat;
              }   
              event.preventDefault();
              if(!SELECTED){
                if(isUserInteracting){
                  cubeManager.camera.position.x += lon*0.5;
                  cubeManager.camera.position.y += lat*0.5;
                   
                }  
              }
              currentActivity.onDocumentMouseMove(event);
        }
        function onDocumentMouseUp( event ) {
              if(!SELECTED){
                if(isUserInteracting){
                  //new TWEEN.Tween( cubeManager.camera.position ).to( {
                  //        x: cubeManager.camera.position.x+(lon*9),
                  //        y: cubeManager.camera.position.y+(lat*9)
                  // },  800 ).easing(TWEEN.Easing.Exponential.EaseOut).start();
                }
                isUserInteracting = false;
              }else{
                isUserInteracting = false;
              }  
              lon = 0;
              lat = 0;
              
              
              currentActivity.onDocumentMouseUp(event);
        }
        
        function animate() {
          requestAnimationFrame(animate);
          render();
          TWEEN.update();
          stats.update();
        }

        function render() {
          //cubeManager.camera.target.y = 500 * Math.cos( phi );
          //cubeManager.camera.target.z = 500 * Math.sin( phi ) * Math.sin( theta );
		
          cubeManager.renderer.render( cubeManager.sceneUtil.scene, cubeManager.camera );
        }
        
        function c(object){
            console.log(object);
        }
        
        function supports_history_api() {
         return !!(window.history && history.pushState);
        }
        
                
        function lastActivity(){
          return lastActivity;
        }
        
        
        window.onload = function() {
          if (!supports_history_api()) { return; }
          //setupHistoryClicks();
          window.setTimeout(function() {
            window.addEventListener("popstate", function(e) {
              currentActivity = lastActivity;
              cubeManager.sceneUtil.scene.clear();
              currentActivity.init(window.cubeNames);
            }, false);
          }, 1);
         } 
